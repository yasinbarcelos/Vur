name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  # Configurações de ambiente para testes
  POSTGRES_DB: vur_test_db
  POSTGRES_USER: vur_test_user
  POSTGRES_PASSWORD: vur_test_password
  SECRET_KEY: test-secret-key-for-ci-cd-only
  ENVIRONMENT: test
  DEBUG: false
  DATABASE_URL: postgresql://vur_test_user:vur_test_password@localhost:5432/vur_test_db

jobs:
  # Job para testes do backend
  backend-tests:
    name: 🐍 Backend Tests
    runs-on: ubuntu-latest
    
    services:
      # PostgreSQL para testes
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      # Redis para cache (opcional)
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: 🔍 Checkout código
      uses: actions/checkout@v4

    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'pip'

    - name: 📦 Instalar dependências do backend
      run: |
        cd backend
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r tests/requirements-test.txt

    - name: 🗃️ Configurar banco de dados
      run: |
        cd backend
        # Executar migrações
        alembic upgrade head
      env:
        DATABASE_URL: ${{ env.DATABASE_URL }}

    - name: 🧪 Executar testes rápidos
      run: |
        cd backend/tests
        python run_tests.py --quick --base-url http://localhost:8000/api/v1 --verbose
      continue-on-error: false

    - name: 🧪 Executar testes completos de autenticação
      run: |
        cd backend/tests
        python run_tests.py --auth --base-url http://localhost:8000/api/v1 --verbose
      continue-on-error: false

  # Job para build e teste com Docker
  docker-tests:
    name: 🐳 Docker Build & Tests
    runs-on: ubuntu-latest
    needs: backend-tests

    steps:
    - name: 🔍 Checkout código
      uses: actions/checkout@v4

    - name: 🐳 Configurar Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 📝 Criar arquivo .env para testes
      run: |
        cat > .env << EOF
        # Configuração para testes CI/CD
        POSTGRES_DB=${{ env.POSTGRES_DB }}
        POSTGRES_USER=${{ env.POSTGRES_USER }}
        POSTGRES_PASSWORD=${{ env.POSTGRES_PASSWORD }}
        SECRET_KEY=${{ env.SECRET_KEY }}
        ENVIRONMENT=test
        DEBUG=false
        LOG_LEVEL=INFO
        BACKEND_PORT=8000
        FRONTEND_PORT=3000
        REDIS_PORT=6379
        VITE_API_URL=http://localhost:8000/api/v1
        ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173
        EOF

    - name: 🏗️ Build das imagens Docker
      run: |
        echo "🏗️ Construindo imagem do backend..."
        docker-compose -f docker-compose.dev.yml build backend
        
        echo "🏗️ Construindo imagem do frontend..."
        docker-compose -f docker-compose.dev.yml build frontend

    - name: 🚀 Iniciar serviços Docker
      run: |
        echo "🚀 Iniciando serviços..."
        docker-compose -f docker-compose.dev.yml up -d postgres redis
        
        echo "⏳ Aguardando PostgreSQL..."
        timeout 60 bash -c 'until docker-compose -f docker-compose.dev.yml exec -T postgres pg_isready -U ${{ env.POSTGRES_USER }}; do sleep 2; done'
        
        echo "🚀 Iniciando backend..."
        docker-compose -f docker-compose.dev.yml up -d backend
        
        echo "⏳ Aguardando backend..."
        timeout 120 bash -c 'until curl -f http://localhost:8000/health; do sleep 5; done'

    - name: 📊 Verificar status dos containers
      run: |
        echo "📊 Status dos containers:"
        docker-compose -f docker-compose.dev.yml ps
        
        echo -e "\n📝 Logs do backend:"
        docker-compose -f docker-compose.dev.yml logs backend --tail=50

    - name: 🧪 Executar testes no ambiente Docker
      run: |
        echo "🧪 Executando testes no ambiente Docker..."
        
        # Instalar dependências de teste no container
        docker-compose -f docker-compose.dev.yml exec -T backend pip install -r tests/requirements-test.txt
        
        # Executar testes
        docker-compose -f docker-compose.dev.yml exec -T backend python tests/run_tests.py --quick --verbose
        docker-compose -f docker-compose.dev.yml exec -T backend python tests/run_tests.py --production --verbose

    - name: 🧹 Cleanup
      if: always()
      run: |
        echo "🧹 Limpando containers..."
        docker-compose -f docker-compose.dev.yml down -v
        docker system prune -f

  # Job para verificações de segurança e qualidade
  security-checks:
    name: 🔒 Security & Quality Checks
    runs-on: ubuntu-latest
    
    steps:
    - name: 🔍 Checkout código
      uses: actions/checkout@v4

    - name: 🐍 Configurar Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: 🔒 Verificar vulnerabilidades de segurança
      run: |
        cd backend
        pip install safety bandit
        
        echo "🔍 Verificando vulnerabilidades com Safety..."
        safety check -r requirements.txt || echo "⚠️ Vulnerabilidades encontradas"
        
        echo "🔍 Análise de segurança com Bandit..."
        bandit -r app/ -f json -o bandit-report.json || echo "⚠️ Problemas de segurança encontrados"

    - name: 📊 Upload dos relatórios de segurança
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-reports
        path: backend/bandit-report.json

  # Job para deploy (apenas no branch main)
  deploy:
    name: 🚀 Deploy
    runs-on: ubuntu-latest
    needs: [backend-tests, docker-tests, security-checks]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: 🔍 Checkout código
      uses: actions/checkout@v4

    - name: 📝 Preparar para deploy
      run: |
        echo "🚀 Preparando artefatos para deploy..."
        echo "Commit: ${{ github.sha }}"
        echo "Branch: ${{ github.ref }}"
        
        # Aqui você pode adicionar steps específicos para seu ambiente de produção
        # Por exemplo: build de imagens para produção, deploy para cloud, etc.

    - name: 📊 Notificar sucesso
      run: |
        echo "✅ Pipeline executado com sucesso!"
        echo "🎉 Todos os testes passaram"
        echo "🔒 Verificações de segurança concluídas"
        echo "🐳 Build Docker bem-sucedido" 